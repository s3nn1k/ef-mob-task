// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/s3nn1k/ef-mob-task/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ServiceIface is an autogenerated mock type for the ServiceIface type
type ServiceIface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, song, group
func (_m *ServiceIface) Create(ctx context.Context, song string, group string) (models.Song, error) {
	ret := _m.Called(ctx, song, group)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.Song, error)); ok {
		return rf(ctx, song, group)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.Song); ok {
		r0 = rf(ctx, song, group)
	} else {
		r0 = ret.Get(0).(models.Song)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, song, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ServiceIface) Delete(ctx context.Context, id int) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, filters
func (_m *ServiceIface) GetAll(ctx context.Context, filters models.GetFilters) ([]models.Song, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetFilters) ([]models.Song, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetFilters) []models.Song); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVerses provides a mock function with given fields: ctx, filters
func (_m *ServiceIface) GetVerses(ctx context.Context, filters models.GetVersesFilters) ([]string, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetVerses")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetVersesFilters) ([]string, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetVersesFilters) []string); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetVersesFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, song
func (_m *ServiceIface) Update(ctx context.Context, song models.Song) (bool, error) {
	ret := _m.Called(ctx, song)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Song) (bool, error)); ok {
		return rf(ctx, song)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Song) bool); ok {
		r0 = rf(ctx, song)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Song) error); ok {
		r1 = rf(ctx, song)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceIface creates a new instance of ServiceIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceIface {
	mock := &ServiceIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
